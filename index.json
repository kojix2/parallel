{"repository_name":"parallel","body":"# Parallel\n\n[![test](https://github.com/kojix2/parallel/actions/workflows/test.yml/badge.svg)](https://github.com/kojix2/parallel/actions/workflows/test.yml)\n[![Lines of Code](https://img.shields.io/endpoint?url=https%3A%2F%2Ftokei.kojix2.net%2Fbadge%2Fgithub%2Fkojix2%2Fparallel%2Flines)](https://tokei.kojix2.net/github/kojix2/parallel)\n\n[Crystal](https://github.com/crystal-lang/crystal) library for parallel processing using [Fiber::ExecutionContext](https://crystal-lang.org/api/Fiber/ExecutionContext.html).\n\n## Requirements\n\n- Crystal 1.6.0+\n- Compile flags: `-Dpreview_mt -Dexecution_context`\n\n## Installation\n\nAdd to `shard.yml`:\n\n```yaml\ndependencies:\n  parallel:\n    github: kojix2/parallel\n```\n\nRun `shards install`\n\n## Usage\n\n```crystal\nrequire \"parallel\"\n\n# Parallel map\n[1, 2, 3, 4].par_map { |x| x * 2 }\n# => [2, 4, 6, 8]\n\n# Parallel each\n[1, 2, 3, 4].par_each { |x| puts x }\n\n# Chunk processing (fewer context switches)\n[1, 2, 3, 4].par_map(chunk: 2) { |x| x * 2 }\n# => [2, 4, 6, 8] (same result, better performance)\n\n# Custom ExecutionContext\ncontext = Fiber::ExecutionContext::MultiThreaded.new(\"workers\", 8)\n[1, 2, 3, 4].par_map(context) { |x| x * 2 }\n```\n\n### Compilation\n\n```bash\ncrystal build -Dpreview_mt -Dexecution_context your_app.cr\ncrystal spec -Dpreview_mt -Dexecution_context\n```\n\n## Methods\n\n- par_map(execution_context = nil, \\*, chunk = nil, &block)\n\n  - Applies block to each element in parallel, returns array of results.\n  - `chunk`: Process elements in chunks to reduce context switches.\n\n- par_each(execution_context = nil, \\*, chunk = nil, &block)\n  - Applies block to each element in parallel for side effects.\n  - `chunk`: Process elements in chunks to reduce context switches.\n\n## Notes\n\n- Works with any Enumerable (Array, Range, Set, Hash, etc.)\n- Indexable types (Array, Slice) preserve order\n- Exceptions are propagated from parallel tasks\n- Uses global ExecutionContext by default for performance\n- Thread safety is your responsibility when accessing shared resources\n\n## Contributing\n\n- Fork this repository\n- Report bugs\n- Fix bugs and submit pull requests\n- Write, clarify, or fix documentation\n- Suggest or add new features\n\n## License\n\nMIT\n\nThis library contains code generated by AI.\n","program":{"html_id":"parallel/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"parallel","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"parallel/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"locations":[{"filename":"src/parallel/enumerable.cr","line_number":4,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/enumerable.cr#L4"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"parallel/Indexable","kind":"module","full_name":"Indexable(T)","name":"Indexable"}],"doc":"Extension for Enumerable types (Array, Hash, Set, Range, etc.)","summary":"<p>Extension for Enumerable types (Array, Hash, Set, Range, etc.)</p>","instance_methods":[{"html_id":"par_each(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->_)-instance-method","name":"par_each","doc":"Parallel each operation\nApplies the given block to each element in parallel (no return value)\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3].par_each { |x| puts x }\n[1, 2, 3, 4].par_each(chunk: 2) { |x| puts x } # same result, fewer context switches\n```","summary":"<p>Parallel each operation Applies the given block to each element in parallel (no return value) Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> _)","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/parallel/enumerable.cr","line_number":35,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/enumerable.cr#L35"},"def":{"name":"par_each","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\n\n\nis_empty, estimated_size = Parallel.check_empty_and_size(self)\nif is_empty\n  return\nend\n\n\nchunk_size = Parallel.validate_chunk_size(chunk, estimated_size)\n\n\nParallel.parallel_each_enumerable(self, context, chunk_size, &block)\n"},"external_var":false},{"html_id":"par_map(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->U)forallU-instance-method","name":"par_map","doc":"Parallel map operation\nApplies the given block to each element in parallel and returns an array of results\nUses lazy evaluation to avoid creating intermediate arrays for memory efficiency\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3, 4].par_map { |x| x * 2 }           # => [2, 4, 6, 8]\n[1, 2, 3, 4].par_map(chunk: 2) { |x| x * 2 } # => [2, 4, 6, 8] (same result, fewer context switches)\n```","summary":"<p>Parallel map operation Applies the given block to each element in parallel and returns an array of results Uses lazy evaluation to avoid creating intermediate arrays for memory efficiency Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> U) forall U","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/parallel/enumerable.cr","line_number":14,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/enumerable.cr#L14"},"def":{"name":"par_map","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\n\n\nis_empty, estimated_size = Parallel.check_empty_and_size(self)\nif is_empty\n  return [] of U\nend\n\n\nchunk_size = Parallel.validate_chunk_size(chunk, estimated_size)\n\nParallel.parallel_map_enumerable(self, context, chunk_size, &block)\n"},"external_var":false}]},{"html_id":"parallel/Indexable","path":"Indexable.html","kind":"module","full_name":"Indexable(T)","name":"Indexable","abstract":false,"ancestors":[{"html_id":"parallel/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"parallel/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"locations":[{"filename":"src/parallel/indexable.cr","line_number":4,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/indexable.cr#L4"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"parallel/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"parallel/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"Optimized extension for Indexable types (Array, Slice, etc.)","summary":"<p>Optimized extension for Indexable types (Array, Slice, etc.)</p>","instance_methods":[{"html_id":"par_each(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->_)-instance-method","name":"par_each","doc":"Optimized parallel each for indexable collections\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3].par_each { |x| puts x }\n[1, 2, 3, 4].par_each(chunk: 2) { |x| puts x } # same result, fewer context switches\n```","summary":"<p>Optimized parallel each for indexable collections Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> _)","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/parallel/indexable.cr","line_number":35,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/indexable.cr#L35"},"def":{"name":"par_each","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\n\n\nis_empty, collection_size = Parallel.check_empty_and_size(self)\nif is_empty\n  return\nend\n\n\nchunk_size = Parallel.validate_chunk_size(chunk, collection_size)\n\nParallel.parallel_each(collection_size, context, chunk_size) do |index|\n  block.call(unsafe_fetch(index))\nend\n"},"external_var":false},{"html_id":"par_map(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->U)forallU-instance-method","name":"par_map","doc":"Optimized parallel map for indexable collections\nUses unsafe_fetch for better performance and guarantees order preservation\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3, 4].par_map { |x| x * 2 }           # => [2, 4, 6, 8]\n[1, 2, 3, 4].par_map(chunk: 2) { |x| x * 2 } # => [2, 4, 6, 8] (same result, fewer context switches)\n```","summary":"<p>Optimized parallel map for indexable collections Uses unsafe_fetch for better performance and guarantees order preservation Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> U) forall U","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/parallel/indexable.cr","line_number":13,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/indexable.cr#L13"},"def":{"name":"par_map","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\n\n\nis_empty, collection_size = Parallel.check_empty_and_size(self)\nif is_empty\n  return [] of U\nend\n\n\nchunk_size = Parallel.validate_chunk_size(chunk, collection_size)\n\nParallel.parallel_map_indexable(collection_size, context, chunk_size) do |index|\n  block.call(unsafe_fetch(index))\nend\n"},"external_var":false}]},{"html_id":"parallel/Parallel","path":"Parallel.html","kind":"module","full_name":"Parallel","name":"Parallel","abstract":false,"locations":[{"filename":"src/parallel/context.cr","line_number":1,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/context.cr#L1"},{"filename":"src/parallel/core.cr","line_number":2,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L2"},{"filename":"src/parallel/version.cr","line_number":1,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/version.cr#L1"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PARALLEL_CONTEXT","name":"PARALLEL_CONTEXT","value":"Fiber::ExecutionContext::MultiThreaded.new(\"parallel-workers\", Fiber::ExecutionContext.default_workers_count)","doc":"Global ExecutionContext for parallel processing\nReusing a single context is recommended for performance","summary":"<p>Global ExecutionContext for parallel processing Reusing a single context is recommended for performance</p>"},{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /home/runner/work/parallel/parallel/src/parallel`).chomp.stringify }}"}],"doc":"Core module for parallel processing functionality","summary":"<p>Core module for parallel processing functionality</p>","class_methods":[{"html_id":"adaptive_chunk_size(collection_size:Int32):Int32-class-method","name":"adaptive_chunk_size","doc":"Determines optimal chunk size for adaptive chunking","summary":"<p>Determines optimal chunk size for adaptive chunking</p>","abstract":false,"args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"}],"args_string":"(collection_size : Int32) : Int32","args_html":"(collection_size : Int32) : Int32","location":{"filename":"src/parallel/core.cr","line_number":4,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L4"},"def":{"name":"adaptive_chunk_size","args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"if collection_size == 0\n  return 1\nend\n\ncpu_count = Fiber::ExecutionContext.default_workers_count\n\nauto_chunk_size = [1, (collection_size.to_f / (cpu_count * 2)).ceil.to_i].max\n\nauto_chunk_size.clamp(1, 1000)\n"},"external_var":false},{"html_id":"check_empty_and_size(collection):Tuple(Bool,Int32)-class-method","name":"check_empty_and_size","doc":"Unified empty check for collections\nReturns {is_empty, estimated_size}","summary":"<p>Unified empty check for collections Returns {is_empty, estimated_size}</p>","abstract":false,"args":[{"name":"collection","external_name":"collection","restriction":""}],"args_string":"(collection) : Tuple(Bool, Int32)","args_html":"(collection) : Tuple(Bool, Int32)","location":{"filename":"src/parallel/core.cr","line_number":39,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L39"},"def":{"name":"check_empty_and_size","args":[{"name":"collection","external_name":"collection","restriction":""}],"return_type":"Tuple(Bool, Int32)","visibility":"Public","body":"if collection.responds_to?(:size)\n  size = collection.size\n  {size == 0, size}\nelse\n  empty = true\n  collection.each do |_|\n    empty = false\n    break\n  end\n  {empty, 100}\nend"},"external_var":false},{"html_id":"handle_each_errors_safe(errors_channel,completed_channel,expected_count:Int32):Array(Exception)-class-method","name":"handle_each_errors_safe","doc":"Handles parallel each operation with error collection (new behavior - collect all errors)","summary":"<p>Handles parallel each operation with error collection (new behavior - collect all errors)</p>","abstract":false,"args":[{"name":"errors_channel","external_name":"errors_channel","restriction":""},{"name":"completed_channel","external_name":"completed_channel","restriction":""},{"name":"expected_count","external_name":"expected_count","restriction":"Int32"}],"args_string":"(errors_channel, completed_channel, expected_count : Int32) : Array(Exception)","args_html":"(errors_channel, completed_channel, expected_count : Int32) : Array(Exception)","location":{"filename":"src/parallel/core.cr","line_number":15,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L15"},"def":{"name":"handle_each_errors_safe","args":[{"name":"errors_channel","external_name":"errors_channel","restriction":""},{"name":"completed_channel","external_name":"completed_channel","restriction":""},{"name":"expected_count","external_name":"expected_count","restriction":"Int32"}],"return_type":"Array(Exception)","visibility":"Public","body":"collected_errors = [] of Exception\nexpected_count.times do\n  select\n  when error = errors_channel.receive\n    collected_errors << error\n  when completed_channel.receive\n  end\nend\ncollected_errors\n"},"external_var":false},{"html_id":"log_fiber_exception(ex:Exception,task_info:String|Nil=nil)-class-method","name":"log_fiber_exception","doc":"Logs fiber exceptions with context information","summary":"<p>Logs fiber exceptions with context information</p>","abstract":false,"args":[{"name":"ex","external_name":"ex","restriction":"Exception"},{"name":"task_info","default_value":"nil","external_name":"task_info","restriction":"String | ::Nil"}],"args_string":"(ex : Exception, task_info : String | Nil = nil)","args_html":"(ex : Exception, task_info : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/parallel/core.cr","line_number":29,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L29"},"def":{"name":"log_fiber_exception","args":[{"name":"ex","external_name":"ex","restriction":"Exception"},{"name":"task_info","default_value":"nil","external_name":"task_info","restriction":"String | ::Nil"}],"visibility":"Public","body":"if task_info\n  Crystal.print_buffered(\"Unhandled exception in parallel task (%s): %s\", task_info, ex.message, exception: ex, to: STDERR)\nelse\n  Crystal.print_buffered(\"Unhandled exception in parallel task: %s\", ex.message, exception: ex, to: STDERR)\nend"},"external_var":false},{"html_id":"parallel_each(collection_size:Int32,context:Fiber::ExecutionContext::MultiThreaded,chunk_size:Int32,&block:Int32->_)-class-method","name":"parallel_each","doc":"Common parallel each implementation\nThis method handles the core logic for both Enumerable and Indexable versions","summary":"<p>Common parallel each implementation This method handles the core logic for both Enumerable and Indexable versions</p>","abstract":false,"args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"args_string":"(collection_size : Int32, context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : Int32 -> _)","args_html":"(collection_size : Int32, context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : Int32 -> _)","location":{"filename":"src/parallel/core.cr","line_number":292,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L292"},"def":{"name":"parallel_each","args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32 -> _)"},"visibility":"Public","body":"if collection_size == 0\n  return\nend\n\nerrors = Channel(Exception).new\ncompleted = Channel(Nil).new\n\nif chunk_size > 1 && collection_size > chunk_size\n  chunks = ((0...collection_size).each_slice(chunk_size)).to_a\n\n  chunks.each_with_index do |chunk_indices, chunk_idx|\n    context.spawn do\n      chunk_indices.each do |index|\n        begin\n          block.call(index)\n        rescue ex\n          errors.send(ex)\n          log_fiber_exception(ex, \"chunk #{chunk_idx}, index #{index}\")\n        end\n      end\n      completed.send(nil)\n    end\n  end\n\n  collected_errors = handle_each_errors_safe(errors, completed, chunks.size)\nelse\n  (0...collection_size).each do |index|\n    context.spawn do\n      begin\n        block.call(index)\n        completed.send(nil)\n      rescue ex\n        errors.send(ex)\n        log_fiber_exception(ex, \"index #{index}\")\n      end\n    end\n  end\n\n  collected_errors = handle_each_errors_safe(errors, completed, collection_size)\nend\n\n\nif collected_errors.empty?\nelse\n  raise(collected_errors.first)\nend\n"},"external_var":false},{"html_id":"parallel_each_enumerable(enumerable:Enumerable(T),context:Fiber::ExecutionContext::MultiThreaded,chunk_size:Int32,&block:T->_)forallT-class-method","name":"parallel_each_enumerable","doc":"Lazy parallel each implementation for Enumerable collections\nThis method processes elements without materializing the entire collection","summary":"<p>Lazy parallel each implementation for Enumerable collections This method processes elements without materializing the entire collection</p>","abstract":false,"args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(T)"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"args_string":"(enumerable : Enumerable(T), context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : T -> _) forall T","args_html":"(enumerable : <a href=\"Enumerable.html\">Enumerable</a>(T), context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : T -> _) forall T","location":{"filename":"src/parallel/core.cr","line_number":220,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L220"},"def":{"name":"parallel_each_enumerable","args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(T)"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"errors = Channel(Exception).new\ncompleted = Channel(Nil).new\n\n\nmutex = Mutex.new\niterator = enumerable.each\nfinished = false\n\n\nworker_count = Fiber::ExecutionContext.default_workers_count\nworker_count.times do\n  context.spawn do\n    loop do\n      items = [] of T\n\n\n      mutex.synchronize do\n        if finished\n          break\n        end\n\n        chunk_size.times do\n          begin\n            item = iterator.next\n            if item.is_a?(Iterator::Stop)\n              finished = true\n              break\n            end\n            items << item\n          rescue ex\n            finished = true\n            errors.send(ex)\n            break\n          end\n        end\n      end\n\n      if items.empty?\n        break\n      end\n\n\n      items.each do |item|\n        begin\n          block.call(item)\n        rescue ex\n          errors.send(ex)\n          break\n        end\n      end\n    end\n\n    completed.send(nil)\n  end\nend\n\n\ncollected_errors = [] of Exception\nworker_count.times do\n  select\n  when error = errors.receive\n    collected_errors << error\n  when completed.receive\n  end\nend\n\n\nif collected_errors.empty?\nelse\n  raise(collected_errors.first)\nend\n"},"external_var":false},{"html_id":"parallel_map_enumerable(enumerable:Enumerable(T),context:Fiber::ExecutionContext::MultiThreaded,chunk_size:Int32,&block:T->U)forallT,U-class-method","name":"parallel_map_enumerable","doc":"Common parallel map implementation for Enumerable collections using lazy evaluation\nThis method handles the core logic for Enumerable versions without creating intermediate arrays","summary":"<p>Common parallel map implementation for Enumerable collections using lazy evaluation This method handles the core logic for Enumerable versions without creating intermediate arrays</p>","abstract":false,"args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(T)"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"args_string":"(enumerable : Enumerable(T), context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : T -> U) forall T, U","args_html":"(enumerable : <a href=\"Enumerable.html\">Enumerable</a>(T), context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : T -> U) forall T, U","location":{"filename":"src/parallel/core.cr","line_number":132,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L132"},"def":{"name":"parallel_map_enumerable","args":[{"name":"enumerable","external_name":"enumerable","restriction":"Enumerable(T)"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"results = Channel(Tuple(Int32, U) | Exception).new\ncompleted = Channel(Nil).new\n\n\nmutex = Mutex.new\niterator = enumerable.each_with_index\nfinished = false\n\n\nworker_count = Fiber::ExecutionContext.default_workers_count\nworker_count.times do |worker_id|\n  context.spawn do\n    loop do\n      items_with_index = [] of Tuple(T, Int32)\n\n\n      mutex.synchronize do\n        if finished\n          break\n        end\n\n        chunk_size.times do\n          begin\n            item_with_index = iterator.next\n            if item_with_index.is_a?(Iterator::Stop)\n              finished = true\n              break\n            end\n            items_with_index << item_with_index\n          rescue ex\n            finished = true\n            results.send(ex)\n            break\n          end\n        end\n      end\n\n      if items_with_index.empty?\n        break\n      end\n\n\n      items_with_index.each do |item, index|\n        begin\n          result = block.call(item)\n          results.send({index, result})\n        rescue ex\n          results.send(ex)\n          log_fiber_exception(ex, \"worker #{worker_id}, item #{index}\")\n          break\n        end\n      end\n    end\n\n    completed.send(nil)\n  end\nend\n\n\nresult_map = Hash(Int32, U).new\ncollected_errors = [] of Exception\ncompleted_workers = 0\n\nloop do\n  select\n  when result = results.receive\n    case result\n    when Tuple(Int32, U)\n      index, value = result\n      result_map[index] = value\n    when Exception\n      collected_errors << result\n    end\n  when completed.receive\n    completed_workers = completed_workers + 1\n    if completed_workers == worker_count\n      break\n    end\n  end\nend\n\n\n\nif collected_errors.empty?\nelse\n  raise(collected_errors.first)\nend\n\n\nresult_map.to_a.sort_by(&.[](0)).map(&.[](1))\n"},"external_var":false},{"html_id":"parallel_map_indexable(collection_size:Int32,context:Fiber::ExecutionContext::MultiThreaded,chunk_size:Int32,&block:Int32->U)forallU-class-method","name":"parallel_map_indexable","doc":"Common parallel map implementation for Indexable collections\nThis method handles the core logic for Indexable versions using direct index access","summary":"<p>Common parallel map implementation for Indexable collections This method handles the core logic for Indexable versions using direct index access</p>","abstract":false,"args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"args_string":"(collection_size : Int32, context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : Int32 -> U) forall U","args_html":"(collection_size : Int32, context : Fiber::ExecutionContext::MultiThreaded, chunk_size : Int32, &block : Int32 -> U) forall U","location":{"filename":"src/parallel/core.cr","line_number":76,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L76"},"def":{"name":"parallel_map_indexable","args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"},{"name":"context","external_name":"context","restriction":"Fiber::ExecutionContext::MultiThreaded"},{"name":"chunk_size","external_name":"chunk_size","restriction":"Int32"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32 -> U)"},"visibility":"Public","body":"if collection_size == 0\n  return [] of U\nend\n\nresults = Channel(Tuple(Int32, U) | Exception).new\n\nif chunk_size > 1 && collection_size > chunk_size\n  chunks = ((0...collection_size).each_slice(chunk_size)).with_index.to_a\n\n  chunks.each do |chunk_indices, chunk_idx|\n    context.spawn do\n      chunk_indices.each_with_index do |index, item_idx|\n        begin\n          result = block.call(index)\n          global_idx = (chunk_idx * chunk_size) + item_idx\n          results.send({global_idx, result})\n        rescue ex\n          results.send(ex)\n          log_fiber_exception(ex, \"chunk #{chunk_idx}, index #{index}\")\n        end\n      end\n    end\n  end\nelse\n  (0...collection_size).each do |index|\n    context.spawn do\n      begin\n        result = block.call(index)\n        results.send({index, result})\n      rescue ex\n        results.send(ex)\n        log_fiber_exception(ex, \"index #{index}\")\n      end\n    end\n  end\nend\n\n\nresult_array = Pointer(U).malloc(collection_size)\ncollection_size.times do\n  case result = results.receive\n  when Tuple(Int32, U)\n    index, value = result\n    result_array[index] = value\n  when Exception\n    raise(result)\n  end\nend\n\n\nArray(U).new(collection_size) do |i|\n  result_array[i]\nend\n"},"external_var":false},{"html_id":"validate_chunk_size(chunk:Int32|Nil,collection_size:Int32):Int32-class-method","name":"validate_chunk_size","doc":"Validates and normalizes chunk size parameter\nReturns the validated chunk size or raises an exception for invalid values","summary":"<p>Validates and normalizes chunk size parameter Returns the validated chunk size or raises an exception for invalid values</p>","abstract":false,"args":[{"name":"chunk","external_name":"chunk","restriction":"Int32 | ::Nil"},{"name":"collection_size","external_name":"collection_size","restriction":"Int32"}],"args_string":"(chunk : Int32 | Nil, collection_size : Int32) : Int32","args_html":"(chunk : Int32 | Nil, collection_size : Int32) : Int32","location":{"filename":"src/parallel/core.cr","line_number":56,"url":"https://github.com/kojix2/parallel/blob/95a9d0a11febf64e0c11e3632bdc22d86c4e7841/src/parallel/core.cr#L56"},"def":{"name":"validate_chunk_size","args":[{"name":"chunk","external_name":"chunk","restriction":"Int32 | ::Nil"},{"name":"collection_size","external_name":"collection_size","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"if chunk.nil?\n  return adaptive_chunk_size(collection_size)\nend\n\nif chunk <= 0\n  raise(ArgumentError.new(\"Chunk size must be a positive integer, got: #{chunk}\"))\nend\n\n\nif chunk > collection_size && collection_size > 0\n  collection_size\nelse\n  chunk\nend\n"},"external_var":false}]}]}}