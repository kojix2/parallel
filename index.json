{"repository_name":"parallel","body":"# Parallel\n\nCrystal library for parallel processing using Fiber::ExecutionContext.\n\n## Requirements\n\n- Crystal 1.6.0+\n- Compile flags: `-Dpreview_mt -Dexecution_context`\n\n## Installation\n\nAdd to `shard.yml`:\n\n```yaml\ndependencies:\n  parallel:\n    github: your-username/parallel\n```\n\nRun `shards install`\n\n## Usage\n\n```crystal\nrequire \"parallel\"\n\n# Parallel map\n[1, 2, 3, 4].par_map { |x| x * 2 }\n# => [2, 4, 6, 8]\n\n# Parallel sum\n(1..100).par_sum { |x| x }\n# => 5050\n\n# Parallel each\n[1, 2, 3, 4].par_each { |x| puts x }\n\n# Custom ExecutionContext\ncontext = Fiber::ExecutionContext::MultiThreaded.new(\"workers\", 8)\n[1, 2, 3, 4].par_map(context) { |x| x * 2 }\n```\n\n## Methods\n\n### par_map(execution_context = nil, &block)\n\nApplies block to each element in parallel, returns array of results.\n\n### par_sum(execution_context = nil, &block)\n\nApplies block to each element in parallel, returns sum of results.\n\n### par_each(execution_context = nil, &block)\n\nApplies block to each element in parallel for side effects.\n\n## Notes\n\n- Works with any Enumerable (Array, Range, Set, Hash, etc.)\n- Indexable types (Array, Slice) preserve order\n- Exceptions are propagated from parallel tasks\n- Uses global ExecutionContext by default for performance\n- Thread safety is your responsibility when accessing shared resources\n\n## Example\n\n```crystal\n# Performance comparison\nputs \"Sequential:\"\ntime = Time.measure do\n  [1, 2, 3, 4].map { |x| sleep(0.1); x * 2 }\nend\nputs time.total_milliseconds # ~400ms\n\nputs \"Parallel:\"\ntime = Time.measure do\n  [1, 2, 3, 4].par_map { |x| sleep(0.1); x * 2 }\nend\nputs time.total_milliseconds # ~100ms\n```\n\n## Compilation\n\n```bash\ncrystal build src/your_app.cr -Dpreview_mt -Dexecution_context\ncrystal spec -Dpreview_mt -Dexecution_context\n```\n\n## License\n\nMIT\n\nThis library contains code generated by AI.","program":{"html_id":"parallel/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"parallel","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"parallel/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"locations":[{"filename":"src/parallel.cr","line_number":24,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L24"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"parallel/Indexable","kind":"module","full_name":"Indexable(T)","name":"Indexable"}],"doc":"Extension for Enumerable types (Array, Hash, Set, Range, etc.)","summary":"<p>Extension for Enumerable types (Array, Hash, Set, Range, etc.)</p>","instance_methods":[{"html_id":"par_each(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,&block:T->_)-instance-method","name":"par_each","doc":"Parallel each operation\nApplies the given block to each element in parallel (no return value)\n\n```\n[1, 2, 3].par_each { |x| puts x }\n```","summary":"<p>Parallel each operation Applies the given block to each element in parallel (no return value)</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, &block : T -> _)","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/parallel.cr","line_number":77,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L77"},"def":{"name":"par_each","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nitems = self.to_a\nerrors = Channel(Exception).new\ncompleted = Channel(Nil).new\n\nitems.each do |item|\n  context.spawn do\n    begin\n      block.call(item)\n      completed.send(nil)\n    rescue ex\n      errors.send(ex)\n    end\n  end\nend\n\nitems.size.times do\n  select\n  when error = errors.receive\n    raise(error)\n  when completed.receive\n  end\nend\n"},"external_var":false},{"html_id":"par_map(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,&block:T->U)forallU-instance-method","name":"par_map","doc":"Parallel map operation\nApplies the given block to each element in parallel and returns an array of results\n\n```\n[1, 2, 3, 4].par_map { |x| x * 2 } # => [2, 4, 6, 8]\n```","summary":"<p>Parallel map operation Applies the given block to each element in parallel and returns an array of results</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, &block : T -> U) forall U","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/parallel.cr","line_number":31,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L31"},"def":{"name":"par_map","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nitems = self.to_a\nresults = Channel(Tuple(Int32, U) | Exception).new\n\nitems.each_with_index do |item, idx|\n  context.spawn do\n    begin\n      result = block.call(item)\n      results.send({idx, result})\n    rescue ex\n      results.send(ex)\n    end\n  end\nend\n\ntemp_results = Array(Tuple(Int32, U)).new\nitems.size.times do\n  case result = results.receive\n  when Tuple(Int32, U)\n    temp_results << result\n  when Exception\n    raise(result)\n  end\nend\n\n\ntemp_results.sort_by(&.[](0)).map(&.[](1))\n"},"external_var":false},{"html_id":"par_sum(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,&block:T->N)forallN-instance-method","name":"par_sum","doc":"Parallel sum operation\nApplies the given block to each element in parallel and returns the sum\n\n```\n(1..10).par_sum { |x| x } # => 55\n```","summary":"<p>Parallel sum operation Applies the given block to each element in parallel and returns the sum</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, &block : T -> N) forall N","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, &block : T -> N) forall N","location":{"filename":"src/parallel.cr","line_number":67,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L67"},"def":{"name":"par_sum","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> N)"},"visibility":"Public","body":"(par_map(execution_context, &block)).sum"},"external_var":false}]},{"html_id":"parallel/Indexable","path":"Indexable.html","kind":"module","full_name":"Indexable(T)","name":"Indexable","abstract":false,"ancestors":[{"html_id":"parallel/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"parallel/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"locations":[{"filename":"src/parallel.cr","line_number":106,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L106"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"parallel/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"parallel/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"Optimized extension for Indexable types (Array, Slice, etc.)","summary":"<p>Optimized extension for Indexable types (Array, Slice, etc.)</p>","instance_methods":[{"html_id":"par_each(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,&block:T->_)-instance-method","name":"par_each","doc":"Optimized parallel each for indexable collections","summary":"<p>Optimized parallel each for indexable collections</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, &block : T -> _)","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/parallel.cr","line_number":144,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L144"},"def":{"name":"par_each","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nerrors = Channel(Exception).new\ncompleted = Channel(Nil).new\n\n(0...size).each do |index|\n  context.spawn do\n    begin\n      block.call(unsafe_fetch(index))\n      completed.send(nil)\n    rescue ex\n      errors.send(ex)\n    end\n  end\nend\n\nsize.times do\n  select\n  when error = errors.receive\n    raise(error)\n  when completed.receive\n  end\nend\n"},"external_var":false},{"html_id":"par_map(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,&block:T->U)forallU-instance-method","name":"par_map","doc":"Optimized parallel map for indexable collections\nUses unsafe_fetch for better performance and guarantees order preservation","summary":"<p>Optimized parallel map for indexable collections Uses unsafe_fetch for better performance and guarantees order preservation</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, &block : T -> U) forall U","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/parallel.cr","line_number":109,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L109"},"def":{"name":"par_map","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nresults = Channel(Tuple(Int32, U) | Exception).new\ntemp_results = Array(Tuple(Int32, U)).new\n\n(0...size).each do |index|\n  context.spawn do\n    begin\n      result = block.call(unsafe_fetch(index))\n      results.send({index, result})\n    rescue ex\n      results.send(ex)\n    end\n  end\nend\n\nsize.times do\n  case result = results.receive\n  when Tuple(Int32, U)\n    temp_results << result\n  when Exception\n    raise(result)\n  end\nend\n\n\ntemp_results.sort_by(&.[](0)).map(&.[](1))\n"},"external_var":false},{"html_id":"par_sum(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,&block:T->N)forallN-instance-method","name":"par_sum","doc":"Optimized parallel sum for indexable collections","summary":"<p>Optimized parallel sum for indexable collections</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, &block : T -> N) forall N","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, &block : T -> N) forall N","location":{"filename":"src/parallel.cr","line_number":139,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L139"},"def":{"name":"par_sum","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> N)"},"visibility":"Public","body":"(par_map(execution_context, &block)).sum"},"external_var":false}]},{"html_id":"parallel/Parallel","path":"Parallel.html","kind":"module","full_name":"Parallel","name":"Parallel","abstract":false,"locations":[{"filename":"src/parallel.cr","line_number":12,"url":"https://github.com/kojix2/parallel/blob/c648695fc0fbe8eb3d3e7e66e51008625f3003ff/src/parallel.cr#L12"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PARALLEL_CONTEXT","name":"PARALLEL_CONTEXT","value":"Fiber::ExecutionContext::MultiThreaded.new(\"parallel-workers\", Fiber::ExecutionContext.default_workers_count)","doc":"Global ExecutionContext for parallel processing\nReusing a single context is recommended for performance","summary":"<p>Global ExecutionContext for parallel processing Reusing a single context is recommended for performance</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"doc":"Parallel processing library for Crystal using Fiber::ExecutionContext\n\nThis library extends Enumerable and Indexable with parallel processing methods\nlike par_map, par_sum, etc. It requires Crystal 1.6.0+ and the following flags:\n-Dpreview_mt -Dexecution_context\n\nExample:\n```\n[1, 2, 3, 4].par_map { |x| x * 2 } # => [2, 4, 6, 8]\n(1..10).par_sum { |x| x }          # => 55\n```","summary":"<p>Parallel processing library for Crystal using Fiber::ExecutionContext</p>"}]}}