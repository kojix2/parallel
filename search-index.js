crystal_doc_search_index_callback({"repository_name":"parallel","body":"# Parallel\n\n[![test](https://github.com/kojix2/parallel/actions/workflows/test.yml/badge.svg)](https://github.com/kojix2/parallel/actions/workflows/test.yml)\n[![Lines of Code](https://img.shields.io/endpoint?url=https%3A%2F%2Ftokei.kojix2.net%2Fbadge%2Fgithub%2Fkojix2%2Fparallel%2Flines)](https://tokei.kojix2.net/github/kojix2/parallel)\n\nCrystal library for parallel processing using Fiber::ExecutionContext.\n\n## Requirements\n\n- Crystal 1.6.0+\n- Compile flags: `-Dpreview_mt -Dexecution_context`\n\n## Installation\n\nAdd to `shard.yml`:\n\n```yaml\ndependencies:\n  parallel:\n    github: kojix2/parallel\n```\n\nRun `shards install`\n\n## Usage\n\n```crystal\nrequire \"parallel\"\n\n# Parallel map\n[1, 2, 3, 4].par_map { |x| x * 2 }\n# => [2, 4, 6, 8]\n\n# Parallel each\n[1, 2, 3, 4].par_each { |x| puts x }\n\n# Chunk processing (fewer context switches)\n[1, 2, 3, 4].par_map(chunk: 2) { |x| x * 2 }\n# => [2, 4, 6, 8] (same result, better performance)\n\n# Custom ExecutionContext\ncontext = Fiber::ExecutionContext::MultiThreaded.new(\"workers\", 8)\n[1, 2, 3, 4].par_map(context) { |x| x * 2 }\n```\n\n### Compilation\n\n```bash\ncrystal build -Dpreview_mt -Dexecution_context your_app.cr\ncrystal spec -Dpreview_mt -Dexecution_context\n```\n\n## Methods\n\n- par_map(execution_context = nil, *, chunk = nil, &block)\n\n  - Applies block to each element in parallel, returns array of results.\n  - `chunk`: Process elements in chunks to reduce context switches.\n\n- par_each(execution_context = nil, *, chunk = nil, &block)\n  - Applies block to each element in parallel for side effects.\n  - `chunk`: Process elements in chunks to reduce context switches.\n\n## Notes\n\n- Works with any Enumerable (Array, Range, Set, Hash, etc.)\n- Indexable types (Array, Slice) preserve order\n- Exceptions are propagated from parallel tasks\n- Uses global ExecutionContext by default for performance\n- Thread safety is your responsibility when accessing shared resources\n\n## Compilation\n\n```bash\ncrystal build src/your_app.cr -Dpreview_mt -Dexecution_context\ncrystal spec -Dpreview_mt -Dexecution_context\n```\n\n## License\n\nMIT\n\nThis library contains code generated by AI.\n","program":{"html_id":"parallel/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"parallel","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"parallel/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"locations":[{"filename":"src/parallel/enumerable.cr","line_number":4,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/enumerable.cr#L4"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"parallel/Indexable","kind":"module","full_name":"Indexable(T)","name":"Indexable"}],"doc":"Extension for Enumerable types (Array, Hash, Set, Range, etc.)","summary":"<p>Extension for Enumerable types (Array, Hash, Set, Range, etc.)</p>","instance_methods":[{"html_id":"par_each(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->_)-instance-method","name":"par_each","doc":"Parallel each operation\nApplies the given block to each element in parallel (no return value)\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3].par_each { |x| puts x }\n[1, 2, 3, 4].par_each(chunk: 2) { |x| puts x } # same result, fewer context switches\n```","summary":"<p>Parallel each operation Applies the given block to each element in parallel (no return value) Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> _)","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/parallel/enumerable.cr","line_number":76,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/enumerable.cr#L76"},"def":{"name":"par_each","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nitems = self.to_a\nif items.empty?\n  return\nend\n\nerrors = Channel(Exception).new\ncompleted = Channel(Nil).new\nchunk_size = chunk || (Parallel.adaptive_chunk_size(items.size))\n\nif chunk_size > 1 && items.size > chunk_size\n  chunks = (items.each_slice(chunk_size)).to_a\n\n  chunks.each_with_index do |chunk_items, chunk_idx|\n    context.spawn do\n      chunk_items.each_with_index do |item, item_idx|\n        begin\n          block.call(item)\n        rescue ex\n          errors.send(ex)\n          Parallel.log_fiber_exception(ex, \"chunk #{chunk_idx}, item #{item_idx}\")\n        end\n      end\n      completed.send(nil)\n    end\n  end\n\n  collected_errors = Parallel.handle_each_errors_safe(errors, completed, chunks.size)\nelse\n  items.each_with_index do |item, idx|\n    context.spawn do\n      begin\n        block.call(item)\n        completed.send(nil)\n      rescue ex\n        errors.send(ex)\n        Parallel.log_fiber_exception(ex, \"item #{idx}\")\n      end\n    end\n  end\n\n  collected_errors = Parallel.handle_each_errors_safe(errors, completed, items.size)\nend\n\n\nif collected_errors.empty?\nelse\n  raise(collected_errors.first)\nend\n"},"external_var":false},{"html_id":"par_map(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->U)forallU-instance-method","name":"par_map","doc":"Parallel map operation\nApplies the given block to each element in parallel and returns an array of results\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3, 4].par_map { |x| x * 2 }           # => [2, 4, 6, 8]\n[1, 2, 3, 4].par_map(chunk: 2) { |x| x * 2 } # => [2, 4, 6, 8] (same result, fewer context switches)\n```","summary":"<p>Parallel map operation Applies the given block to each element in parallel and returns an array of results Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> U) forall U","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/parallel/enumerable.cr","line_number":13,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/enumerable.cr#L13"},"def":{"name":"par_map","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nitems = self.to_a\nif items.empty?\n  return items.map(&block)\nend\n\nresults = Channel(Tuple(Int32, U) | Exception).new\nchunk_size = chunk || (Parallel.adaptive_chunk_size(items.size))\n\nif chunk_size > 1 && items.size > chunk_size\n  chunks = (items.each_slice(chunk_size)).with_index.to_a\n\n  chunks.each do |chunk_items, chunk_idx|\n    context.spawn do\n      chunk_items.each_with_index do |item, item_idx|\n        begin\n          result = block.call(item)\n          global_idx = (chunk_idx * chunk_size) + item_idx\n          results.send({global_idx, result})\n        rescue ex\n          results.send(ex)\n          Parallel.log_fiber_exception(ex, \"chunk #{chunk_idx}, item #{item_idx}\")\n        end\n      end\n    end\n  end\nelse\n  items.each_with_index do |item, idx|\n    context.spawn do\n      begin\n        result = block.call(item)\n        results.send({idx, result})\n      rescue ex\n        results.send(ex)\n        Parallel.log_fiber_exception(ex, \"item #{idx}\")\n      end\n    end\n  end\nend\n\ntemp_results = Array(Tuple(Int32, U)).new\nitems.size.times do\n  case result = results.receive\n  when Tuple(Int32, U)\n    temp_results << result\n  when Exception\n    raise(result)\n  end\nend\n\n\ntemp_results.sort_by(&.[](0)).map(&.[](1))\n"},"external_var":false}]},{"html_id":"parallel/Indexable","path":"Indexable.html","kind":"module","full_name":"Indexable(T)","name":"Indexable","abstract":false,"ancestors":[{"html_id":"parallel/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"parallel/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"locations":[{"filename":"src/parallel/indexable.cr","line_number":4,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/indexable.cr#L4"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"parallel/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"parallel/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"Optimized extension for Indexable types (Array, Slice, etc.)","summary":"<p>Optimized extension for Indexable types (Array, Slice, etc.)</p>","instance_methods":[{"html_id":"par_each(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->_)-instance-method","name":"par_each","doc":"Optimized parallel each for indexable collections\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3].par_each { |x| puts x }\n[1, 2, 3, 4].par_each(chunk: 2) { |x| puts x } # same result, fewer context switches\n```","summary":"<p>Optimized parallel each for indexable collections Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> _)","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/parallel/indexable.cr","line_number":74,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/indexable.cr#L74"},"def":{"name":"par_each","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> _)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nif size == 0\n  return\nend\n\nerrors = Channel(Exception).new\ncompleted = Channel(Nil).new\nchunk_size = chunk || (Parallel.adaptive_chunk_size(size))\n\nif chunk_size > 1 && size > chunk_size\n  chunks = ((0...size).each_slice(chunk_size)).to_a\n\n  chunks.each_with_index do |chunk_indices, chunk_idx|\n    context.spawn do\n      chunk_indices.each do |index|\n        begin\n          block.call(unsafe_fetch(index))\n        rescue ex\n          errors.send(ex)\n          Parallel.log_fiber_exception(ex, \"chunk #{chunk_idx}, index #{index}\")\n        end\n      end\n      completed.send(nil)\n    end\n  end\n\n  collected_errors = Parallel.handle_each_errors_safe(errors, completed, chunks.size)\nelse\n  (0...size).each do |index|\n    context.spawn do\n      begin\n        block.call(unsafe_fetch(index))\n        completed.send(nil)\n      rescue ex\n        errors.send(ex)\n        Parallel.log_fiber_exception(ex, \"index #{index}\")\n      end\n    end\n  end\n\n  collected_errors = Parallel.handle_each_errors_safe(errors, completed, size)\nend\n\n\nif collected_errors.empty?\nelse\n  raise(collected_errors.first)\nend\n"},"external_var":false},{"html_id":"par_map(execution_context:Fiber::ExecutionContext::MultiThreaded|Nil=nil,*,chunk:Int32|Nil=nil,&block:T->U)forallU-instance-method","name":"par_map","doc":"Optimized parallel map for indexable collections\nUses unsafe_fetch for better performance and guarantees order preservation\nUses robust error handling internally but maintains fail-fast behavior\n\n```\n[1, 2, 3, 4].par_map { |x| x * 2 }           # => [2, 4, 6, 8]\n[1, 2, 3, 4].par_map(chunk: 2) { |x| x * 2 } # => [2, 4, 6, 8] (same result, fewer context switches)\n```","summary":"<p>Optimized parallel map for indexable collections Uses unsafe_fetch for better performance and guarantees order preservation Uses robust error handling internally but maintains fail-fast behavior</p>","abstract":false,"args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"args_string":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = nil, *, chunk : Int32 | Nil = nil, &block : T -> U) forall U","args_html":"(execution_context : Fiber::ExecutionContext::MultiThreaded | Nil = <span class=\"n\">nil</span>, *, chunk : Int32 | Nil = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/parallel/indexable.cr","line_number":13,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/indexable.cr#L13"},"def":{"name":"par_map","args":[{"name":"execution_context","default_value":"nil","external_name":"execution_context","restriction":"Fiber::ExecutionContext::MultiThreaded | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"chunk","default_value":"nil","external_name":"chunk","restriction":"Int32 | ::Nil"}],"splat_index":1,"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(T -> U)"},"visibility":"Public","body":"context = execution_context || Parallel::PARALLEL_CONTEXT\nif size == 0\n  return [] of U\nend\n\nresults = Channel(Tuple(Int32, U) | Exception).new\nchunk_size = chunk || (Parallel.adaptive_chunk_size(size))\n\nif chunk_size > 1 && size > chunk_size\n  chunks = ((0...size).each_slice(chunk_size)).with_index.to_a\n\n  chunks.each do |chunk_indices, chunk_idx|\n    context.spawn do\n      chunk_indices.each_with_index do |index, item_idx|\n        begin\n          result = block.call(unsafe_fetch(index))\n          global_idx = (chunk_idx * chunk_size) + item_idx\n          results.send({global_idx, result})\n        rescue ex\n          results.send(ex)\n          Parallel.log_fiber_exception(ex, \"chunk #{chunk_idx}, index #{index}\")\n        end\n      end\n    end\n  end\nelse\n  (0...size).each do |index|\n    context.spawn do\n      begin\n        result = block.call(unsafe_fetch(index))\n        results.send({index, result})\n      rescue ex\n        results.send(ex)\n        Parallel.log_fiber_exception(ex, \"index #{index}\")\n      end\n    end\n  end\nend\n\ntemp_results = Array(Tuple(Int32, U)).new\nsize.times do\n  case result = results.receive\n  when Tuple(Int32, U)\n    temp_results << result\n  when Exception\n    raise(result)\n  end\nend\n\n\ntemp_results.sort_by(&.[](0)).map(&.[](1))\n"},"external_var":false}]},{"html_id":"parallel/Parallel","path":"Parallel.html","kind":"module","full_name":"Parallel","name":"Parallel","abstract":false,"locations":[{"filename":"src/parallel/core.cr","line_number":2,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/core.cr#L2"}],"repository_name":"parallel","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PARALLEL_CONTEXT","name":"PARALLEL_CONTEXT","value":"Fiber::ExecutionContext::MultiThreaded.new(\"parallel-workers\", Fiber::ExecutionContext.default_workers_count)","doc":"Global ExecutionContext for parallel processing\nReusing a single context is recommended for performance","summary":"<p>Global ExecutionContext for parallel processing Reusing a single context is recommended for performance</p>"},{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /home/runner/work/parallel/parallel/src/parallel`).chomp.stringify }}"}],"doc":"Core module for parallel processing functionality","summary":"<p>Core module for parallel processing functionality</p>","class_methods":[{"html_id":"adaptive_chunk_size(collection_size:Int32):Int32-class-method","name":"adaptive_chunk_size","doc":"Determines optimal chunk size for adaptive chunking","summary":"<p>Determines optimal chunk size for adaptive chunking</p>","abstract":false,"args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"}],"args_string":"(collection_size : Int32) : Int32","args_html":"(collection_size : Int32) : Int32","location":{"filename":"src/parallel/core.cr","line_number":13,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/core.cr#L13"},"def":{"name":"adaptive_chunk_size","args":[{"name":"collection_size","external_name":"collection_size","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"if collection_size == 0\n  return 1\nend\n\ncpu_count = Fiber::ExecutionContext.default_workers_count\n\nauto_chunk_size = [1, (collection_size.to_f / (cpu_count * 2)).ceil.to_i].max\n\nauto_chunk_size.clamp(1, 1000)\n"},"external_var":false},{"html_id":"ensure_cleanup(&cleanup_block)-class-method","name":"ensure_cleanup","doc":"Ensures cleanup is performed even if exceptions occur","summary":"<p>Ensures cleanup is performed even if exceptions occur</p>","abstract":false,"location":{"filename":"src/parallel/core.cr","line_number":47,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/core.cr#L47"},"def":{"name":"ensure_cleanup","yields":0,"block_arity":0,"block_arg":{"name":"cleanup_block","external_name":"cleanup_block","restriction":""},"visibility":"Public","body":"at_exit do |exit_code, exception|\n  cleanup_block.call\nend"},"external_var":false},{"html_id":"handle_each_errors_safe(errors_channel,completed_channel,expected_count:Int32):Array(Exception)-class-method","name":"handle_each_errors_safe","doc":"Handles parallel each operation with error collection (new behavior - collect all errors)","summary":"<p>Handles parallel each operation with error collection (new behavior - collect all errors)</p>","abstract":false,"args":[{"name":"errors_channel","external_name":"errors_channel","restriction":""},{"name":"completed_channel","external_name":"completed_channel","restriction":""},{"name":"expected_count","external_name":"expected_count","restriction":"Int32"}],"args_string":"(errors_channel, completed_channel, expected_count : Int32) : Array(Exception)","args_html":"(errors_channel, completed_channel, expected_count : Int32) : Array(Exception)","location":{"filename":"src/parallel/core.cr","line_number":24,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/core.cr#L24"},"def":{"name":"handle_each_errors_safe","args":[{"name":"errors_channel","external_name":"errors_channel","restriction":""},{"name":"completed_channel","external_name":"completed_channel","restriction":""},{"name":"expected_count","external_name":"expected_count","restriction":"Int32"}],"return_type":"Array(Exception)","visibility":"Public","body":"collected_errors = [] of Exception\nexpected_count.times do\n  select\n  when error = errors_channel.receive\n    collected_errors << error\n  when completed_channel.receive\n  end\nend\ncollected_errors\n"},"external_var":false},{"html_id":"log_fiber_exception(ex:Exception,task_info:String|Nil=nil)-class-method","name":"log_fiber_exception","doc":"Logs fiber exceptions with context information","summary":"<p>Logs fiber exceptions with context information</p>","abstract":false,"args":[{"name":"ex","external_name":"ex","restriction":"Exception"},{"name":"task_info","default_value":"nil","external_name":"task_info","restriction":"String | ::Nil"}],"args_string":"(ex : Exception, task_info : String | Nil = nil)","args_html":"(ex : Exception, task_info : String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/parallel/core.cr","line_number":38,"url":"https://github.com/kojix2/parallel/blob/21394d0fd493a2ae08ec1ef601c09ab520b342fb/src/parallel/core.cr#L38"},"def":{"name":"log_fiber_exception","args":[{"name":"ex","external_name":"ex","restriction":"Exception"},{"name":"task_info","default_value":"nil","external_name":"task_info","restriction":"String | ::Nil"}],"visibility":"Public","body":"if task_info\n  Crystal.print_buffered(\"Unhandled exception in parallel task (%s): %s\", task_info, ex.message, exception: ex, to: STDERR)\nelse\n  Crystal.print_buffered(\"Unhandled exception in parallel task: %s\", ex.message, exception: ex, to: STDERR)\nend"},"external_var":false}]}]}})